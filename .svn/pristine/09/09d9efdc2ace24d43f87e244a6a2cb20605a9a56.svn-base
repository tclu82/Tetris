/*
 * TCSS 305 Assignment 6 - Tetris
 */

package view;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Shape;
import java.awt.geom.RoundRectangle2D;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.TitledBorder;

import model.AbstractPiece;
import model.Board;
import model.Piece;

/**
 * The NextPiecePanel to display next piece.
 *
 * @author Tzu-Chien Lu
 * @version Dec 11 2015
 */
public class NextPiecePanel extends JPanel implements Observer {
    
    // Constant.

    /** A UID is generated by Eclipse. */
    private static final long serialVersionUID = 6798105652377408937L;

    /** Size of each block, in pixels. */
    private static final int BLOCK_SIZE = 25;
    
    /** 4 Blocks in 1 piece. */
    private static final int BLOCK_NUM = 4;

    /**The background color of the panel.*/
    private static final Color BG_COLOR = Color.WHITE;

    /** Horizontal and vertical gap for set Title of panel.*/
    private static final int GAP = 8;
    
    /** Arc for shape width. */
    private static final int ARC_W = 15;
    
    /** Arc for shape hieght. */
    private static final int ARC_H = 15;
    
    // Instant fields.
    
    /** A board is used to be added to observer and use its method. */
    private final Board myBoard;
    
    /**
     * Constructor for NextPiecePanel.
     * @param theBoard elements of board.
     */
    public NextPiecePanel(final Board theBoard) {
        super();
        myBoard = theBoard;
        myBoard.addObserver(this);
        setBackground(BG_COLOR);
        title();
    }

    /**
     * Helper method to set the title of panel.
     */
    private void title() {
        final Font font = new Font(Font.MONOSPACED, Font.BOLD + Font.CENTER_BASELINE, 25);
        setLayout(new GridLayout(1, 1, GAP, GAP));
        final JLabel label = new JLabel();
        final TitledBorder titled = new TitledBorder("Next Piece");
        titled.setTitleColor(Color.ORANGE);
        titled.setTitleFont(font);
        label.setBorder(titled);
        add(label);
    }

    /**
     * Update the next piece.
     * 
     * @param theObj object.
     * @param theArg argument.
     */
    @Override
    public void update(final Observable theObj, final Object theArg) {  
        repaint();
    }
    
    /**
     * Draw the elements of each piece to panel when repaint is call.
     * Also, draw grid on the panel.
     * 
     * @param theGraphics The Graphics object.
     */
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        drawNextPiece(theGraphics);
    }

    /**
     * Draw next piece on the NextPiecePanel.
     * 
     * @param theGraphics graphics to draw.
     */
    public void drawNextPiece(final Graphics theGraphics) {
        final Graphics2D g2d = (Graphics2D) theGraphics;
        final Piece nextPiece = myBoard.getNextPiece();
        final int[][] piece = ((AbstractPiece) nextPiece).getRotation();
            
        for (final int[] p : piece) {
            drawPiece(g2d, Color.RED, Color.BLACK, p[0], p[1]);
        }   
    }
    
    /**
     * Helper method drawing a piece.
     * 
     * @param theG2D Graphics2D
     * @param theColor1 Color for piece.
     * @param theColor2 Color for piece boarder.
     * @param theX X coordinate
     * @param theY Y coordinate
     */
    private void drawPiece(final Graphics2D theG2D, final Color theColor1,
                           final Color theColor2,
                           final int theX, final int theY) {
        
        /** Funny shapes. */
//        final Shape ellipse = new Ellipse2D.Double(theX * BLOCK_SIZE + (getWidth() / 2 / 2), 
//                                                   (BLOCK_NUM - theY) * BLOCK_SIZE, 
//                                                   BLOCK_SIZE, 
//                                                   BLOCK_SIZE);
        
        final Shape shape = new RoundRectangle2D.Double(
                                                    theX * BLOCK_SIZE + (getWidth() / 2 / 2), 
                                                    (BLOCK_NUM - theY) * BLOCK_SIZE, 
                                                    BLOCK_SIZE, 
                                                    BLOCK_SIZE, ARC_W, ARC_H);
        
        /** Draw piece color. */
        theG2D.setColor(theColor1);
        theG2D.fill(shape);
        
        /** Draw piece boarder. */
        theG2D.setColor(theColor2);
        theG2D.draw(shape);
    }
}
