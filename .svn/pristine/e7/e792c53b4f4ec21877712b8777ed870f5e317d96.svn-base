/*
 * TCSS 305 Assignment 6 - Tetris
 */

package view;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.RenderingHints;

import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.TitledBorder;

/**
 * Information panel displays information of control.
 *
 * @author Tzu-Chien Lu
 * @version Dec 11 2015
 */
public class InfoPanel extends JPanel {

    // Constant.
    
    /** A UID is generated by Eclipse. */
    private static final long serialVersionUID = -4400953322552889507L;

    /** Font size for text in this panel. */
    private static final int FONT_SIZE = 15;

    /** Adjustment for Y coordinates. */
    private static final int SHIFT_Y = 25;

    /** Adjustment for X coordinates. */
    private static final int SHIFT_X = 5;

    /** Horizontal and vertical gap for set Title of panel.*/
    private static final int GAP = 10;

    /** Strings used in this panel. */
    private static final String[] LABELS =
    {"Left:", "Right:", "Down:", "Rotate:", "Drop:", "(Un)pause:"};

    /** Strings used in this panel. */
    private static final String[] KEY_VALUES =
    {"      Left", "     Right",  "      Down", "     Up", "      Space", "   P"};

    /**
     * Constructor of Information Panel.
     */
    public InfoPanel() {
        super(true);
        setup();
    }
   
    /**
     * Helper method for constructor. 
     */
    private void setup() {
        setBackground(Color.WHITE);
        final Font font = new Font(Font.MONOSPACED, Font.BOLD + Font.CENTER_BASELINE,
                              FONT_SIZE);

        this.setLayout(new GridLayout(1, 1, GAP, GAP));
        final JLabel label = new JLabel(" ");
        final TitledBorder titled = new TitledBorder("Keyboard Information");
        titled.setTitleColor(Color.ORANGE);
        titled.setTitleFont(font);
        label.setBorder(titled);
        add(label);
    }
    
    /**
     * Display the key information by draw the string.
     * @param  theGraphics  Graphics to draw.
     */
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                         RenderingHints.VALUE_ANTIALIAS_ON);
        final Font font = new Font(Font.MONOSPACED,
                                 Font.BOLD + Font.CENTER_BASELINE,
                                 FONT_SIZE);
        g2d.setFont(font);

        for (int i = LABELS.length - 1; i >= 0; i--) {

            g2d.drawString(LABELS[i] + KEY_VALUES[i], SHIFT_X,
                           ((i + 1) * FONT_SIZE) + SHIFT_Y);
        }
    }
}
