/*
 * TCSS 305 Assignment 6 - Tetris
 */

package view;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.geom.Line2D;
import java.awt.geom.RoundRectangle2D;

import java.util.List;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;

import model.AbstractPiece;
import model.Block;
import model.Board;
import model.Piece;

import sound.Sound;

/**
 * The GamePanel for the user to play.
 *
 * @author Tzu-Chien Lu
 * @version Dec 11 2015
 */
public class GamePanel extends JPanel implements Observer {
    
    // Constant.

    /** A UID is generated by Eclipse. */
    private static final long serialVersionUID = -3005218765460271467L;
    
    /** Block size in pixels.*/
    private static final int BLOCK_SIZE = 25;
    
    /** Arc for shape width. */
    private static final int ARC_W = 15;
    
    /** Arc for shape height. */
    private static final int ARC_H = 15;
    
    // Instant fields.
    
    /** Board object that this panel uses. */
    protected Board myBoard;
    
    /** A boolean is used for pause. */
    private boolean myPause;
    
    /** A boolean is used for select grid. */
    private boolean myGrid;
    
    /**
     * Initializes GamePanel.
     * 
     * @param theBoard is the board.
     */
    public GamePanel(final Board theBoard) {
        super();      
        myBoard = theBoard;
        
        /** MyBoard extends Observable. */
        myBoard.addObserver(this);
        Sound.init();
        myGrid = false;
    }

    /**
     * Just repaint what it pulls from Observable.
     */
    @Override
    public void update(final Observable theObj, final Object theArg) {
        repaint();
    }

    /**
     * Called by repaint().
     */
    @Override
    protected void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        setBackground(Color.BLACK);
        draw(theGraphics);
    }

    /**
     * Draw the frozen blocks and current piece.
     * 
     * @param theGraphics Graphics.
     */
    public void draw(final Graphics theGraphics) {
        final Graphics2D g2d = (Graphics2D) theGraphics;
        
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        
        drawFrozenBlocks(g2d); 
        drawBackGround(g2d);
        drawCurrentPiece(g2d);
        
        /** Draw grid if grid check box is selected. */
        if (myGrid) {
            drawGrid(theGraphics);
        }
    }
    
    /**
     * A helper method drawing frozen blocks.
     *  
     * @param theG2D Graphics2D
     */
    private void drawFrozenBlocks(final Graphics2D theG2D) {
        final List<Block[]> frozen = myBoard.getFrozenBlocks();
        
        for (int row = 0; row < frozen.size(); row++) {
            for (int col = 0; col < frozen.get(row).length; col++) {
                
                if (frozen.get(row)[col] != Block.EMPTY) {         
                    drawPiece(theG2D, Color.GREEN, Color.BLACK, col, row);
                }
            }
        }
    }
    
    /**
     * A helper method drawing current piece.
     * 
     * @param theG2D Graphics2D
     */
    private void drawCurrentPiece(final Graphics2D theG2D) {
        
        final Piece tetrisBlock = myBoard.getCurrentPiece();
        final int[][] piece = ((AbstractPiece) tetrisBlock).getBoardCoordinates();
        
        for (final int[] p : piece) {
            drawPiece(theG2D, Color.YELLOW, Color.BLACK, p[0], p[1]);
        }
    } 
    
    /**
     * Helper method for draw piece.
     * 
     * @param theG2D Graphics2D
     * @param theColor1 for draw piece.
     * @param theColor2 for draw piece boarder.
     * @param theX x coordinate
     * @param theY y coordinate
     */
    private void drawPiece(final Graphics2D theG2D, 
                           final Color theColor1, 
                           final Color theColor2, 
                           final int theX, final int theY) {
        
        /** Other shape. */
        
//        final Shape shape = new Ellipse2D.Double(theX * BLOCK_SIZE, 
//                                           (myBoard.getHeight() - theY - 1) * BLOCK_SIZE, 
//                                           BLOCK_SIZE, 
//                                           BLOCK_SIZE);
        
        final Shape shape = new RoundRectangle2D.Double(theX * BLOCK_SIZE, 
                                                (myBoard.getHeight() - theY - 1) * BLOCK_SIZE, 
                                                BLOCK_SIZE, 
                                                BLOCK_SIZE, ARC_W, ARC_H);
        
        theG2D.setPaint(theColor1);  
        theG2D.fill(shape);
        theG2D.setColor(theColor2);   
        theG2D.draw(shape);
    }
    
    /**
     * Background setting. 
     * 
     * @param theG2D theG2D.
     */
    private void drawBackGround(final Graphics theG2D) {
        
        
        /** Maybe do it next time. */
        
//        final Image bg = new Image("images/mount_rainier.jpg"));
//        final JLabel label = new JLabel(bg);
//        theG2D.drawImage(bg, 0, 0, null);
    }
    
    /**
     * Switch between pause and resume.
     */
    public void pauseAndResume() {
        myPause = !myPause;
        repaint();
    }
    
    /**
     * Return if the grid is check.
     * 
     * @return myGridCheck 
     */
    public boolean isGridChecked() {
        return myGrid;
    }
    
    
    /**
     * Set the grid when it check.
     * 
     * @param theGrid Is grid Checked?
     */
    public void gridCheck(final boolean theGrid) {
        myGrid = theGrid;
        repaint();
    }
    
    /**
     * Draw grid on game panel.
     * 
     * @param theGraphics theG2D.
     */
    private void drawGrid(final Graphics theGraphics) {
        final Graphics2D g2d = (Graphics2D) theGraphics;
        final int boardHeight = myBoard.getHeight();
        final int boardWidth = myBoard.getWidth();
        for (int i = 0; i < Math.max(boardHeight, boardWidth); i++) {
            g2d.setColor(Color.WHITE);
            final int spacing = i * BLOCK_SIZE;
            g2d.draw(new Line2D.Double(0, spacing, boardWidth * BLOCK_SIZE, spacing));
            g2d.draw(new Line2D.Double(spacing, 0, spacing, boardHeight * BLOCK_SIZE));
        }
    }
}
