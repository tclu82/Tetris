/*
 * TCSS 305 Assignment 6 - Tetris
 */

package view;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.RenderingHints;
import java.awt.font.FontRenderContext;
import java.awt.font.GlyphVector;
import java.awt.geom.Rectangle2D;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.border.TitledBorder;

import model.Board;

/**
 * The ScorePanel to display score instructions.
 *
 * @author Tzu-Chien Lu
 * @version Dec 11 2015
 */

public class ScorePanel extends JPanel implements Observer {
    
    // Constant.
    
    /** How many lines completed to next level. */
    private static final int LEVEL_UP = 3;
    
    /** Font size. */
    private static final int FONT_SIZE = 15;
    
    /** Horizontal and vertical gap for set Title of panel.*/
    private static final int GAP = 10;
    
    /** How many points is scored by completing a line. */
    private static final int SCORES_PER_LINE = 20;
    
    /** Y-coordinate for display. */
    private static final int Y_COORDINATE_1 = 40;
    
    /** Y-coordinate for display. */
    private static final int Y_COORDINATE_2 = 60;
    
    /** Y-coordinate for display. */
    private static final int Y_COORDINATE_3 = 100;
    
    /** Y-coordinate for display. */
    private static final int Y_COORDINATE_4 = 120;
    
    /** A UID is generated by Eclipse. */
    private static final long serialVersionUID = 8628376425965021750L;

    /** Default delay between Timer events, in milliseconds. */
    private static final int DEFAULT_DELAY = 1000;
    
    /** Level up points. */
    private static final int LEVELUP_POINTS = 100;
    
    // Instant fields.
  
    /** Instance of Board which this panel represents. */
    private final Board myBoard;

    /** Instance of Timer controlling speed of game this panel represents. */
    private final Timer myTimer;
    
    /** Current score of the game. */
    private int myScore;
    
    /** Current level. */
    private int myLevel;
    
    /** The lines have been completed so far. */
    private int myLines;

    /** A integer is used for calculating clear lines. */
    private int myBlockSize;
    
    /** A field stores total clear lines. */
    private int myTotalClearLines;
        
    /** A field shows how many lines to reach next level. */
    private int myNextLevel;
    
    /** Store the highest score. */
    private int myHighestScore;

    /**
     * Constructor.
     *
     * @param theBoard Board object representing current game.
     * @param theTimer Timer object for current game.
     * @param theTimerDelay Initial speed of theTimer.
     */
    public ScorePanel(final Board theBoard, final Timer theTimer, final int theTimerDelay) {
        super();
        myBoard = theBoard;
        myTimer = theTimer;
        setup();
        title();
        myBoard.addObserver(this);
    }
    
    /**
     * Helper method for constructor.
     */
    private void setup() {
        myScore = 0;
        myLevel = 1;
        myLines = 0;
        myBlockSize = 0;
        myHighestScore = 0;
        myTotalClearLines = 0;
        myNextLevel = LEVEL_UP;
        setBackground(Color.WHITE);
    }
    
    /**
     * Helper method to set the title of panel.
     */
    private void title() {
        final Font font = new Font(Font.MONOSPACED, Font.BOLD + Font.CENTER_BASELINE, 20);
        setLayout(new GridLayout(1, 1, GAP, GAP));
        final JLabel label = new JLabel();
        final TitledBorder titled = new TitledBorder("Score Info");
        titled.setTitleColor(Color.ORANGE);
        titled.setTitleFont(font);
        label.setBorder(titled);
        add(label);
    }
    
    /**
     * Resets this panel when a new game is started.
     */
    public void reset() {
        myLevel = 1;
        myLines = 0;
        myScore = 0;
        myTimer.setDelay(DEFAULT_DELAY);
        myTotalClearLines = 0;
        repaint();
    }

    /**
     * Update and get data when the line are clear.
     * 
     * @param theObj object.
     * @param theArg argument.
     */
    @Override
    public void update(final Observable theObj, final Object theArg) {
        
        /** Use board size to calculate completed level. */
        final int blockSize = myBoard.getFrozenBlocks().size();
        
        if (blockSize > myBlockSize) {
            myBlockSize = blockSize;
        
        /** When level(s) completed. */    
        } else {
            final int clearedLine = myBlockSize - blockSize;
            myTotalClearLines += clearedLine;

            if (myTimer.isRunning() && clearedLine >= 1) {
                myScore += clearedLine * SCORES_PER_LINE;
            }
//            System.out.println(myScore);
            
            /** Suppose 3 lines to level up. */
            if ((myTotalClearLines / LEVEL_UP) + 1 > myLevel) { 
                myLevel += 1;
                
                /** Speed up when level up. */
                myTimer.setDelay(DEFAULT_DELAY / myLevel);
                
                /** Level up points. */
                myScore += myLevel * LEVELUP_POINTS;
            }
            /** How many lines for next level. */
            myNextLevel = LEVEL_UP - (myTotalClearLines % LEVEL_UP);
            myBlockSize = blockSize;
        }     
        repaint();
    }

    /**
     * Update the information.
     * 
     * @param theGraphics The Graphics to draw.
     */
    @Override
    public void paintComponent(final Graphics theGraphics) {

        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;

        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        final Font font = new Font(Font.MONOSPACED, Font.BOLD + Font.CENTER_BASELINE,
                                   FONT_SIZE);
        g2d.setFont(font);
        final FontRenderContext renderContext = g2d.getFontRenderContext();
    
        drawLevel(theGraphics, font, renderContext);
        drawScore(theGraphics, font, renderContext);
        drawLineCleared(theGraphics, font, renderContext);
        drawToNextLevel(theGraphics, font, renderContext);
        drawHeightScore(theGraphics, font, renderContext);
    }
    
    /**
     * Display current level.
     * 
     * @param theGraphics Graphics
     * @param theFont Font
     * @param theContext FontRenderContext
     */
    private void drawLevel(final Graphics theGraphics, final Font theFont,
                           final FontRenderContext theContext) {
        final Graphics2D g2d = (Graphics2D) theGraphics;
        final GlyphVector glyphVector =
              theFont.createGlyphVector(theContext, "Level:" + myScore);
        final Rectangle2D visualBounds = glyphVector.getVisualBounds().getBounds();

        final int x = (int) ((getWidth() - visualBounds.getWidth()) / 2
                  - visualBounds.getX());

        g2d.drawString("Level: " + myLevel, x, Y_COORDINATE_1);        
    }
    
    /**
     * Draw the current Score.
     * 
     * @param theGraphics Graphics
     * @param theFont Font
     * @param theContext FontRenderContext
     */
    private void drawScore(final Graphics theGraphics, final Font theFont,
                          final FontRenderContext theContext) {
        
        final Graphics2D g2d = (Graphics2D) theGraphics;        
        final GlyphVector glyphVector =
              theFont.createGlyphVector(theContext, "Score:" + myScore);
        final Rectangle2D visualBounds = glyphVector.getVisualBounds().getBounds();

        final int x = (int) ((getWidth() - visualBounds.getWidth()) / 2
                  - visualBounds.getX());

        g2d.drawString("Score: " + myScore, x, Y_COORDINATE_2);
    }

    /**
     * Display how many lines cleared.
     * 
     * @param theGraphics Graphics
     * @param theFont Font
     * @param theContext FontRenderContext
     */
    private void drawLineCleared(final Graphics theGraphics, final Font theFont,
                                final FontRenderContext theContext) {
        
        final Graphics2D g2d = (Graphics2D) theGraphics;
        final int cleared = myLines;        
        final GlyphVector glyphVector =
              theFont.createGlyphVector(theContext, "Line Cleared: " + cleared);
        final Rectangle2D visualBounds = glyphVector.getVisualBounds().getBounds();
        final int x = (int) ((getWidth() / 4 - visualBounds.getWidth() / 3));

        g2d.drawString("Total clear lines: " + myTotalClearLines, x, Y_COORDINATE_1 * 2);
    }
    
    /**
     * How many lines to next level.
     * 
     * @param theGraphics Graphics
     * @param theFont Font
     * @param theContext FontRenderContext
     */
    private void drawToNextLevel(final Graphics theGraphics, final Font theFont,
                                 final FontRenderContext theContext) {
        
        final Graphics2D g2d = (Graphics2D) theGraphics;
        final int x = (int) ((getWidth() / 8));

        g2d.drawString(myNextLevel + " lines to level " + (myLevel + 1), x, Y_COORDINATE_3);
        
    }
    
    /**
     * To display the  highest Score.
     * 
     * @param theGraphics Graphics
     * @param theFont Font
     * @param theContext FontRenderContext
     */
    private void drawHeightScore(final Graphics theGraphics, final Font theFont,
                                final FontRenderContext theContext) {
        
        final Graphics2D g2d = (Graphics2D) theGraphics;
        final int x = (int) ((getWidth() / 8));

        if (myScore > myHighestScore) {
            myHighestScore = myScore;
        }

        g2d.drawString("Highest Score: " + myHighestScore, x, Y_COORDINATE_4);
    }
}
